#!/opt/bin/bash

# Update Linode DNS

# Constants
declare -r SCRIPT_NAME="$(basename ${BASH_SOURCE[0]})"
declare -r LINODE_API_KEY="<your key goes here>"
declare -r DOMAIN_ID="<your domain id goes here>"
declare -r RESOURCE_ID="<your resource id goes here>"
declare -r NAME="<host name from your A record>"

# Globals
declare log="/opt/var/log/ddns-start.log"

# Functions
log_msg() {
    local msg="${1}"
    local detail="${2}"

    # Log to both syslog and ${log}
    if [[ ${detail:=false} == true ]]; then
        printf "\n${msg}\n\n" >> ${log}
    else
        logger -t ${SCRIPT_NAME} "${msg}"
        printf "$(date '+%b %d %H:%M:%S'):\t${msg}\n" >> ${log}
    fi

    return 0;

}

purge_log() {
	local log_size="$(du -k ${log} | awk '{ print $1 }')"
	if (( log_size > 1024 )); then
		: > ${log}
		log_msg "Purged ${log}"
	fi
}

check_cron() {
    # Frontier changes our IP very often, so we want to run this script every 15 minutes
    if [[ -z $(cru l | grep ${SCRIPT_NAME}) ]]; then
        # Add cron job
        cru a ${SCRIPT_NAME} "*/15 * * * * /jffs/scripts/ddns-start \$(nvram get wan0_realip_ip)"
        log_msg "Added cron job"
    fi

    return 0
}

notify_firmware() {
    # The router firmware calls /jffs/scripts/ddns-start when you tell
    # it to use "custom" as the DDNS provider. It also expects to be told
    # whether the DDNS provider errored out or succeeded
    # 0=fail, 1=pass
    /sbin/ddns_custom_updated ${1}

    return 0
}

reconcile_wan_ip() {
    local nvram_ip=${1}
    local ipinfo_ip
    local tries

    if [[ ${nvram_ip} =~ ^[0-9] ]]; then
        log_msg "WAN IP from router firmware is ${nvram_ip}"
    else
        log_msg "Router firmware did not pass a valid WAN IP"
        nvram_ip=$(nvram get wan0_realip_ip)
        log_msg "WAN IP from NVRAM is ${nvram_ip}"
    fi

    for tries in {1..5}; do
        #log_msg "Fetching WAN IP from ipinfo.io/ip"
        ipinfo_ip=$(curl -s ipinfo.io/ip 2>/dev/null)
        if [[ ${ipinfo_ip} =~ ^[0-9] ]]; then
            log_msg "WAN IP from ipinfo.io/ip is ${ipinfo_ip}"
            break
    fi
        log_msg "Failed retrieving WAN IP from ipinfo.ip (try number ${tries})"
        sleep 1
    done

    if [[ ${ipinfo_ip} =~ ^[0-9] ]]; then
    if [[ ${nvram_ip} == ${ipinfo_ip} ]]; then
        echo ${nvram_ip}
    else
            log_msg "NVRAM WAN IP (${nvram_ip}) does not match ipinfo.io/ip (${ipinfo_ip:=null})"
        # Assume that if we can ping ${ipinfo_ip} that it is correct
        # I have seen the NVRAM value take a min to get the right value
        ping -c1 ${ipinfo_ip} | grep -qs '1 packets received'
        if (( ${?} == 0 )); then
            log_msg "${ipinfo_ip} is alive - overriding NVRAM value"
            echo ${ipinfo_ip}
            nvram set wan0_realip_ip=${ipinfo_ip}
        else
            log_msg "${ipinfo_ip} is unreachable - retaining NVRAM value"
            echo ${nvram_ip}
        fi
        fi
    else
        log_msg "${ipinfo_ip} is unreachable - retaining NVRAM value"
        echo ${nvram_ip}
    fi

    return 0
}

get_dns_ip() {
    # See what IP Linode has, already. I thought about just doing $(dig +short <hostname>),
    # but with DNS caching enabled on the router that's not so reliable. Also, we don't want
    # to push an update if that's already done and we're just waiting out TTL
    local dns_ip=$(curl -s -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${LINODE_API_KEY}" \
                -X GET https://api.linode.com/v4/domains/${DOMAIN_ID}/records/${RESOURCE_ID} 2>/dev/null | \
                jq --raw-output '.target')

    if [[ ${dns_ip} =~ ^[0-9] ]]; then
        echo ${dns_ip}
    else
        log_msg "api.linode.com returned ${dns_ip}"
    fi

    return 0
}

update_dns_record () {
    # Use curl to PUT new IP in A record for ${NAME}
    local new_ip="${1}"
    local json_response=$(
        curl -s -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${LINODE_API_KEY}" \
            -X PUT -d '{
                "type": "A",
                "name": "'${NAME}'",
                "target": "'${new_ip}'",
                "priority": 0,
                "weight": 0,
                "port": 0,
                "service": null,
                "protocol": null,
                "ttl_sec": 30,
                "tag": null
            }' \
            https://api.linode.com/v4/domains/${DOMAIN_ID}/records/${RESOURCE_ID} 2>/dev/null
        )
    local json_ip=$(echo ${json_response} | jq --raw-output '.target')

    if [[ ${json_ip} == ${new_ip} ]]; then
        # IP changed
        log_msg "Succeeded updating DNS A record for ${NAME} with ${new_ip}"
        notify_firmware 1
        return 0
    else
        # IP change failed
        log_msg "Failed updating DNS A record for ${NAME}"
        log_msg "${json_response}" true
        notify_firmware 0
        return 1
    fi

    return 0
}

main() {
    umask 0077

    # Purge log file when it hits 1G in like 500 years
    purge_log

    # Make sure cron job exists
    check_cron

    # Router firmware will pass us current WAN IP $(nvram get wan0_realip_ip)
    # Reconcile that with what the internet says our IP is
    local current_ip=$(reconcile_wan_ip ${1})

    # Fetch current A record value
    local dns_ip=$(get_dns_ip)
    if [[ ! ${dns_ip:-null} =~ ^[0-9] ]]; then
        log_msg "Fetching IP from Linode DNS record failed"
        notify_firmware 0
        return 1
    fi

    # Update A record if IP has changed
    if [[ ${current_ip} != ${dns_ip} ]]; then
        # IPs do not match, so we need to update DNS
        log_msg "WAN IP address has changed"
        log_msg "WAN IP is now ${current_ip}"
        update_dns_record ${current_ip}
        return ${?}
    else
        # IP change not needed, but we have to report that to the firmware to keep it happy
        log_msg "WAN IP has not changed"
        notify_firmware 1
        return 0
    fi
}

# Main script
main "${@}"

exit ${?}
